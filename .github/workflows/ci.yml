name: Build cnc_firmware

on:
#  push:
#    branches:
#      -main
#    paths: Configurations/**
#    tags:
#      - "v*.*.*"
#    paths-ignore: |
#      MarlinFirmware/**
#      examples_gcode/**
#  pull_request:
#    branches:
#      -main
#    paths: Configurations/**

  workflow_dispatch:  
    inputs:
      board:
        required: true
        default: mega2560
        description: Board environment  
      config:
        required: true
        default: https://github.com/MarlinFirmware/Configurations/config/default
        description: Configuration directory
      repository_1:
        required: true
        default: MarlinFirmware/Marlin
        description: Marlin Repository
      ref:
        description: Branch / tag / SHA to checkout
  
#permissions:
#  actions: read|write|none
#  checks: read|write|none
#  contents: read|write|none
#  deployments: read|write|none
#  id-token: read|write|none
#  issues: read|write|none
#  discussions: read|write|none
#  packages: read|write|none
#  pages: read|write|none
#  pull-requests: read|write|none
#  repository-projects: read|write|none
#  security-events: read|write|none
#  statuses: read|write|none

# env:
#   branch: "2.1.2"
#     # ${{ fromJson(
#     #   github.event_name == 'schedule' && '["bugfix-2.1.x"]' ||
#     #   github.event_name == 'pull_request' && '["bugfix-2.1.x", "2.1.2"]' ||
#     #   '["2.1.2"]') }}      
#   machine: ramps14

jobs:
  matrix:
    name: Generate test matrix
    runs-on: ubuntu-latest
    outputs:
      matrix-json: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3
      - id: set-matrix
        shell: bash
        shell: pwsh
        run: |
          $jsonArrayString = "[`"test1:test2:test3`",`"test4:test5:test6`"]"
          echo "JSON_ARRAY=${jsonArrayString}" >> $GITHUB_OUTPUT
          echo $GITHUB_OUTPUT

    outputs:
      JSON_ARRAY: ${{ steps.matrix_json_step.outputs.JSON_ARRAY }}

        # # Use a small PowerShell script to generate the test matrix
        # #run: "& .github/workflows/create-test-matrix.ps1"
        # run: |
        #   echo "::set-output name=matrix::[
        #     \"branch\": \"2.1.2\",
        #     \"machine\": [\"ramps14\", \"ramps_16\"],
        #     {
        #       \"go\":\"1.13\",
        #       \"commit\":\"v1.0.0\"
        #     },
        #     {
        #       \"go\":\"1.14\",
        #       \"commit\":\"v1.2.0\"
        #     }]"

  test:
    name: "Run unit tests"
    needs: [matrix]

    env:
      MARLIN_VERSION: ${{ matrix.branch }}
      CONFIG_NAME: ${{ matrix.machine }}
      V1_VERSION: ${{ github.event_name == 'release' && github.event.release.tag_name || '' }}

    # strategy:
    #   fail-fast: false
    #   matrix:
    #     include: ${{ fromJson(needs.matrix.outputs.matrix-json) }}

    strategy:
      fail-fast: false
      matrix:
        JSON_ARRAY: ${{ fromJson(needs.matrix.outputs.JSON_ARRAY) }}

  
    defaults:
      run:
        shell: bash
    runs-on: ubuntu-latest
    steps:
    # Cloning my repository to the runner:  
      - uses: actions/checkout@v3  
        name: "Checkout source repository"
        with:
          path: ${{ matrix.machine }}/**        

  build:
    name: Build firmware
    needs: [matrix, test]

    env:
      MARLIN_VERSION: ${{ matrix.branch }}
      CONFIG_NAME: ${{ matrix.machine }}
      V1_VERSION: ${{ github.event_name == 'release' && github.event.release.tag_name || '' }}

    # strategy:
    #   fail-fast: false
    #   matrix:
    #     include: ${{ fromJson(needs.matrix.outputs.matrix-json) }}
    strategy:
      fail-fast: false
      matrix:
        JSON_ARRAY: ${{ fromJson(needs.matrix.outputs.JSON_ARRAY) }}        

    defaults:
      run:
        shell: bash
    runs-on: ubuntu-latest
           
    steps:
      # Cloning my repository to the runner:  
      - uses: actions/checkout@v3  
        name: Checkout source repository
        with:
          path: ${{ matrix.machine }}/**
        
      # Cloning repository to the runner:
      - uses: actions/checkout@v3
        name: Checkout MarlinFirmware
        with:
          repository: MarlinFirmware/Marlin
          ref: ${{ matrix.branch }}
          path: Marlin 
          clean: true
#           fetch-depth: 1
    
      # Install Python
      - uses: actions/setup-python@v4
        name: Select Python 3.10
        with:
          python-version: '3.10' # Version range or exact version of a Python version to use, using semvers version range syntax.
          architecture: 'x64' # optional x64 or x86. Defaults to x64 if not specified      
      # Install PlatformIO Core    
      - name: Install PlatformIO Core
        run: |
          pip install --upgrade platformio
          pio lib --global install olikraus/U8glib@^1.19.1       

      # Copy config files Marlin folder
      - name: Copy configuration
        run: |
          whoami
          cp -a ${{ matrix.machine }}/. Marlin/Marlin/
          cd Marlin/Marlin
          ls -la

      # Compile firmware
      - name: Compile firmware
        run: |
          pio run --project-dir Marlin --environment mega2560

      # Prepare assets
      - name: Add artifacts to publish to the temp folder
        run: |
          mkdir -p downloads/pio
          ls -la
          cp -a Marlin/.pio/. downloads/
          ls -la -R downloads

      - name: 'Zip files'
        run: zip -r ${{ matrix.machine }}-${{ matrix.branch }}_artifact.zip downloads
      - name: 'Upload artifact for deployment job'
        id: upload_artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.machine }}-${{ matrix.branch }}_artifact
          path: |        
            ${{ matrix.machine }}-${{ matrix.branch }}_artifact.zip     
            *.hex
            firmware*  

      - name: 'list folder'
        run: |
          ls -la
          echo "pokus"

  deploy:
    name: Release firmware
    needs: [matrix, build]

    env:
      MARLIN_VERSION: ${{ matrix.branch }}
      CONFIG_NAME: ${{ matrix.machine }}
      V1_VERSION: ${{ github.event_name == 'release' && github.event.release.tag_name || '' }}

    strategy:
      fail-fast: false
      matrix:
        JSON_ARRAY: ${{ fromJson(needs.matrix.outputs.JSON_ARRAY) }}

    defaults:
      run:
        shell: bash    
    runs-on: ubuntu-latest
    
 #   permissions:
 #     contents: write    
      
    steps:
      - name: Downloads artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.machine }}-${{ matrix.branch }}_artifact

      - name: "list folder"
        run: |
          ls -la    
          echo "pokus" 

      - name: Create Github release
        id: create-new-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_number }}
          release_name: Release ${{ github.run_number }}

      - name: "list folder"
        run: |
          ls -la    
          echo "pokus"

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}        
        with:
          upload_url: ${{ steps.create-new-release.outputs.upload_url }}
          asset_path: ${{ matrix.machine }}-${{ matrix.branch }}_artifact.zip
          asset_name: fw-${{ matrix.machine }}-${{ matrix.branch }}.zip
          asset_content_type: application/zip

      - name: "list folder"
        run: |
          ls -la    
          echo "pokus"
    
      - name: Show files changed
        run: |
          ls -la -R  ./
          ls -la -R  $HOME/
        

    
