name: Build firmware

on:
#  push:
#    branches:
#      -main
#    paths: Configurations/**
#    tags:
#      - "v*.*.*"
#    paths-ignore: |
#      MarlinFirmware/**
#      examples_gcode/**
#  pull_request:
#    branches:
#      -main
#    paths: Configurations/**

  workflow_dispatch:  
    inputs:
      board:
        required: true
        default: mega2560
        description: Board environment  
      config:
        required: true
        default: https://github.com/MarlinFirmware/Configurations/config/default
        description: Configuration directory
      repository_1:
        required: true
        default: MarlinFirmware/Marlin
        description: Marlin Repository
      ref:
        description: Branch / tag / SHA to checkout
  
# ${{ fromJson(
#     #   github.event_name == 'schedule' && '["bugfix-2.1.x"]' ||
#     #   github.event_name == 'pull_request' && '["bugfix-2.1.x", "2.1.2"]' ||
#     #   '["2.1.2"]') }}      
#  machine: ramps14

jobs:
#---------------------------------------------------------------------
# prepare build matrix from firmware/matrix.json
#---------------------------------------------------------------------
  preset_values:
    name: Generate test matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      # Cloning my repository to the runner:  
      - uses: actions/checkout@v3  
        name: Checkout source repository  
      - id: set-matrix
        run: |
          JSON=$(sed '{:q;N;s/\n//g;t q}' firmware/matrix.json ) 
          echo "matrix=$JSON" >> $GITHUB_OUTPUT
                 
#---------------------------------------------------------------------
# make necessary tests, generated matrix should pass this job
#---------------------------------------------------------------------
  test:
    name: "Run unit tests"
    needs: preset_values

    env:
      MARLIN_VERSION: ${{ matrix.branch }}
      CONFIG_NAME: ${{ matrix.machine }}
      V1_VERSION: ${{ github.event_name == 'release' && github.event.release.tag_name || '' }}

    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.preset_values.outputs.matrix) }}

    defaults:
      run:
        shell: bash
    runs-on: ubuntu-latest
    steps:
      # Cloning my repository to the runner:  
      - uses: actions/checkout@v3  
        name: "Checkout source repository"

      - name: Check Files
        run: |
          cat firmware/${{ matrix.machine }}/${{ matrix.branch }}/Configuration.h
          
          
#---------------------------------------------------------------------
# make build process
#---------------------------------------------------------------------
  build:
    name: Build firmware
    needs: [preset_values, test]

    env:
      MARLIN_VERSION: ${{ matrix.branch }}
      CONFIG_NAME: ${{ matrix.machine }}
      V1_VERSION: ${{ github.event_name == 'release' && github.event.release.tag_name || '' }}

    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.preset_values.outputs.matrix) }}

    defaults:
      run:
        shell: bash
    runs-on: ubuntu-latest
           
    steps:
      # Cloning my repository to the runner:  
      - uses: actions/checkout@v3  
        name: Checkout source repository
        
      # Cloning repository to the runner:
      - uses: actions/checkout@v3
        name: Checkout MarlinFirmware
        with:
          repository: MarlinFirmware/Marlin
          ref: ${{ matrix.branch }}
          path: Marlin 
          clean: true
#           fetch-depth: 1
    
      # Install Python
      - uses: actions/setup-python@v4
        name: Select Python 3.10
        with:
          python-version: '3.10' # Version range or exact version of a Python version to use, using semvers version range syntax.
          architecture: 'x64' # optional x64 or x86. Defaults to x64 if not specified      
      # Install PlatformIO Core    
      - name: Install PlatformIO Core
        run: |
          pip install --upgrade platformio
          pio lib --global install olikraus/U8glib@^1.19.1       

      # Copy config files Marlin folder
      - name: Copy configuration
        run: |
          whoami
          cp -a firmware/${{ matrix.machine }}/${{ matrix.branch }}/. Marlin/Marlin/

      # Compile firmware
      - name: Compile firmware
        run: |
          pio run --project-dir Marlin --environment mega2560

      # Prepare assets
      - name: Add artifacts to publish to the temp folder
        run: |
          mkdir -p downloads/pio
          ls -la
          cp -a Marlin/.pio/. downloads/
          ls -la -R downloads

      - name: 'Zip files'
        run: zip -r ${{ matrix.machine }}-${{ matrix.branch }}_artifact.zip downloads/*.hex downloads/*.bin downloads/*.elf
      - name: 'Upload artifact for deployment job'
        id: upload_artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.machine }}-${{ matrix.branch }}_artifact
          path: |        
            ${{ matrix.machine }}-${{ matrix.branch }}_artifact.zip     
            *.hex
            firmware*  

      - name: 'list folder'
        run: |
          ls -la
          echo "pokus"

#---------------------------------------------------------------------
# deploy builded release
#---------------------------------------------------------------------
  deploy:
    name: Release firmware
    needs: [preset_values, build]

    env:
      MARLIN_VERSION: ${{ matrix.branch }}
      CONFIG_NAME: ${{ matrix.machine }}
      V1_VERSION: ${{ github.event_name == 'release' && github.event.release.tag_name || '' }}

    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.preset_values.outputs.matrix) }}

    defaults:
      run:
        shell: bash    
    runs-on: ubuntu-latest
    
    steps:
      - name: Downloads artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.machine }}-${{ matrix.branch }}_artifact

      - name: "list folder"
        run: |
          ls -la    
          echo "pokus" 

      - name: Create Github release
        id: create-new-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_number }}
          release_name: Release ${{ github.run_number }}

      - name: "list folder"
        run: |
          ls -la    
          echo "pokus"

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}        
        with:
          upload_url: ${{ steps.create-new-release.outputs.upload_url }}
          asset_path: ${{ matrix.machine }}-${{ matrix.branch }}_artifact.zip
          asset_name: fw-${{ matrix.machine }}-${{ matrix.branch }}.zip
          asset_content_type: application/zip

      - name: "list folder"
        run: |
          ls -la    
          echo "pokus"
    
      - name: Show files changed
        run: |
          ls -la -R  ./
          ls -la -R  $HOME/
        

    
