name: Build cnc_firmware

on:
#  push:
#    branches:
#      -main
#    paths: Configurations/**
#    tags:
#      - "v*.*.*"
#    paths-ignore: |
#      MarlinFirmware/**
#      examples_gcode/**
#  pull_request:
#    branches:
#      -main
#    paths: Configurations/**

  workflow_dispatch:  
    inputs:
#      token:
#        default: ${{ github.token }}
#      repository:
#        default: ${{ github.repository }}
#      actor:
#        default: ${{ github.actor }}
      board:
        required: true
        default: mega2560
        description: Board environment  
      config:
        required: true
        default: https://github.com/MarlinFirmware/Configurations/config/default
        description: Configuration directory
      repository_1:
        required: true
        default: MarlinFirmware/Marlin
        description: Marlin Repository
      ref:
        description: Branch / tag / SHA to checkout
  
#permissions:
#  actions: read|write|none
#  checks: read|write|none
#  contents: read|write|none
#  deployments: read|write|none
#  id-token: read|write|none
#  issues: read|write|none
#  discussions: read|write|none
#  packages: read|write|none
#  pages: read|write|none
#  pull-requests: read|write|none
#  repository-projects: read|write|none
#  security-events: read|write|none
#  statuses: read|write|none
  
defaults:
  run:
    shell: bash
#    working-directory: ./build
  
jobs:
  test:
    name: "Run unit tests"
    defaults:
      run:
        shell: bash
    runs-on: ubuntu-latest
    steps:
    # Cloning my repository to the runner:  
      - uses: actions/checkout@v3  
        name: "Checkout source repository"

  build:
    name: 'Build firmware'
    needs: test
    defaults:
      run:
        shell: bash
    runs-on: ubuntu-latest
         
    env:
      MARLIN_VERSION: ${{ matrix.branch }}
      CONFIG_NAME: ${{ matrix.machine }}    
    
    strategy:
      fail-fast: false # Allow all machines to finish building
      matrix:
        branch: ${{ fromJson(
          github.event_name == 'schedule' && '["bugfix-2.1.x"]' ||
          github.event_name == 'pull_request' && '["bugfix-2.1.x", "2.1.2"]' ||
          '["2.1.2"]') }}
        machine:
        - default_Ramps 
        
    steps:
      # Cloning my repository to the runner:  
      - uses: actions/checkout@v3  
        name: 'Checkout source repository'
        with:
          path: Configurations/**
        
      # Cloning repository to the runner:
      - uses: actions/checkout@v3
        name: 'Checkout MarlinFirmware'
        with:
          repository: MarlinFirmware/Marlin
          ref: ${{ matrix.branch }}
          path: Marlin 
          clean: true
#           fetch-depth: 1
    
      # Install Python
      - uses: actions/setup-python@v4
        name: 'Select Python 3.10'
        with:
          python-version: '3.10' # Version range or exact version of a Python version to use, using semvers version range syntax.
          architecture: 'x64' # optional x64 or x86. Defaults to x64 if not specified      
      # Install PlatformIO Core    
      - name: 'Install PlatformIO Core'
        run: |
          pip install --upgrade platformio
          pio lib --global install olikraus/U8glib@^1.19.1       

      # Compile firmware
      - name: 'Compile firmware'
        run: |
          pio run --project-dir Marlin --environment mega2560

      # Prepare assets
      - name: 'Add artifacts to publish to the temp folder'
        run: |
          mkdir -p downloads/pio
          ls -la
          cp -a Marlin/.pio/. downloads/
          ls -la -R downloads
      - name: 'Zip files'
        run: zip -r ${{ matrix.machine }}-${{ matrix.branch }}_artifact.zip downloads
      - name: 'Upload artifact for deployment job'
        id: upload_artifacts
        uses: actions/upload-artifact@v3
        with:
          name: firmware.zip
        #   name: ${{ matrix.machine }}-${{ matrix.branch }}_artifact
          path: |        
            ${{ matrix.machine }}-${{ matrix.branch }}_artifact.zip     
            *.hex
            firmware*  

            
      - name: 'list folder'
        run: |
          ls -la
          echo "pokus"

#     - name: Show files changed
#       run: |
#         echo ${{ steps.step_id.outputs.url_output }}
#         echo ${{ steps.upload_artifacts.outputs.upload_url }}
#         echo ${{ github.ref }}
#         echo ${{ secrets.GITHUB_TOKEN }}
#         echo ${{ github.token }}


# - name: Create Release
#   id: create_release
#   uses: actions/create-release@v1
#   env:
#     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#   with:
#     tag_name: ${{ github.ref }}
#     release_name: Release ${{ github.ref }}
#     draft: false
#     prerelease: false

#      - name: upload linux artifact
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ github.token }}
#        with:
#         upload_url: ${{ steps.upload_artifacts.outputs.upload_url }} 
#          asset_path: ./${{ matrix.machine }}-${{ matrix.branch }}_artifact.zip
#          asset_name: ${{ matrix.machine }}-${{ matrix.branch }}_artifact.zip
#          asset_content_type: application/zip 

  deploy:
    name: Release firmware
    needs: build
    defaults:
      run:
        shell: bash    
    runs-on: ubuntu-latest
    
 #   permissions:
 #     contents: write    
      
    steps:
      - name: Downloads artifact
        uses: actions/download-artifact@v3
        with:
          name: firmware.zip

      - name: "list folder"
        run: |
          ls -la    
          echo "pokus" 

      - name: Create Github release
        id: create-new-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_number }}
          release_name: Release ${{ github.run_number }}

      - name: "list folder"
        run: |
          ls -la    
          echo "pokus"

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}        
        with:
          upload_url: ${{ steps.create-new-release.outputs.upload_url }}
          asset_path: firmware.zip
          asset_name: firmware-v${{ github.run_number }}.zip
          asset_content_type: application/zip

      - name: "list folder"
        run: |
          ls -la    
          echo "pokus"
    
  
      - name: Show files changed
        run: |
          ls -la -R  ./
          ls -la -R  $HOME/
        

    
